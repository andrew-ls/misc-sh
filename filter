#!/bin/sh

# Copyright (c) 2018 Andrew Steel <copyright@andrewsteel.net>
#
# SPDX-License-Identifier: GPL-3.0-only
#
# The GNU General Public License Version 3 only:
#
# This is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License Version 3
# as published by the Free Software Foundation.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# For the full license, see <https://www.gnu.org/licenses/>.

# filter:
# Read standard input, apply filters from a built-in library,
# and print the result to standard output.
#
# TODO:
# * Add alternate `--quotes` filter, for removing asymmetrical quotes:
#       «»‘’‚‛“”„‟‹›❛❜❝❞❟❠❮❯⹂〝〞〟🙶🙷🙸

IFS="$(printf ' \t\n!')"; IFS="${IFS%!}"

unset -v \
	filters \
	switches
while test "${#}" -gt '0'; do
	if \
		test "${1%"${1#??}"}" != "--" \
		&& test "${1%"${1#?}"}" = "-" \
		&& test "$(printf '%s' "${1#?}" | wc -m)" -gt '0'
	then
		switches=''
		for OPTION in $(printf '%s' "${1#?}" | fold -w '1'); do
			case "${OPTION}" in
				('d') switches="${switches:+${switches} }--dos-newlines" ;;
				('q') switches="${switches:+${switches} }--quotes" ;;
				('u') switches="${switches:+${switches} }--unix-newlines" ;;
				('w') switches="${switches:+${switches} }--whitespace" ;;
				(*)
					printf '%s: %s\n' \
						"$(basename "${0}")" \
						'invalid option '\'"-${OPTION}"\' \
						>&2
					echo >&2
					"${0}" --help >&2
					exit
					;;
			esac
		done
		shift
		set -- ${switches} "${@}"
	fi
	case "${1}" in
		( '--d' \
		| '--do' \
		| '--dos' \
		| '--dos-' \
		| '--dos-n' \
		| '--dos-ne' \
		| '--dos-new' \
		| '--dos-newl' \
		| '--dos-newli' \
		| '--dos-newlin' \
		| '--dos-newline' \
		| '--dos-newlines' )
			filters="${filters:+${filters} }dos-newlines"
			;;
		( '--h' \
		| '--he' \
		| '--hel' \
		| '--help' )
			printf 'Usage: %s [%s]...\n' \
				"$(basename "${0}")" \
				'OPTION'
			echo
			printf '%s\n' \
				'With no OPTION, OPTION is equivalent to '\''-uwqw'\''.'
			echo
			printf '%s\n' \
				'Read standard input, apply filters from a built-in library, and print the' \
				'result to standard output. Filters are applied in the order of the passed' \
				'options, and may be repeated by specifying the same option multiple times.'
			echo
			printf '%s:\n' 'Options'
			printf '%5s %-17s %s\n' \
				'' '--help' \
					'print this and exit' \
				'-d,' '--dos-newlines' \
					'converts to DOS-style newlines (LF to CR LF)' \
				'-q,' '--quotes' \
					'remove matching pair of surrounding quotes' \
				'-u,' '--unix-newlines' \
					'converts to UNIX-style newlines (CR LF to LF)' \
				'-w,' '--whitespace' \
					'remove leading and trailing whitespace'
			exit
			;;
		( '--q' \
		| '--qu' \
		| '--quo' \
		| '--quot' \
		| '--quote' \
		| '--quotes' )
			filters="${filters:+${filters} }quotes"
			;;
		( '--u' \
		| '--un' \
		| '--uni' \
		| '--unix' \
		| '--unix-' \
		| '--unix-n' \
		| '--unix-ne' \
		| '--unix-new' \
		| '--unix-newl' \
		| '--unix-newli' \
		| '--unix-newlin' \
		| '--unix-newline' \
		| '--unix-newlines' )
			filters="${filters:+${filters} }unix-newlines"
			;;
		( '--w' \
		| '--wh' \
		| '--whi' \
		| '--whit' \
		| '--white' \
		| '--whites' \
		| '--whitesp' \
		| '--whitespa' \
		| '--whitespac' \
		| '--whitespace' )
			filters="${filters:+${filters} }whitespace"
			;;
		(*)
			printf '%s: %s\n' \
				"$(basename "${0}")" \
				'unrecognized option '\'"${1}"\' \
				>&2
			echo >&2
			"${0}" --help >&2
			exit
			;;
	esac
	shift
done
FILTERS="${filters:-unix-newlines whitespace quotes whitespace}"
INPUT="$(cat)"

output="${INPUT}"
for FILTER in ${FILTERS}; do
	case "${FILTER}" in

		('dos-newlines')
			output="$(
				printf '%s' "${output}" \
				| sed '
					/[^\r]$/s/$/\r/g;
				'
			)"
			;;

		('quotes')
			output="$(
				printf '%s' "${output}" \
				| sed '
					s/^\(["'\''＂]\)\(.*\)\1$/\2/g;
				'
			)"
			;;

		('unix-newlines')
			output="$(
				printf '%s' "${output}" \
				| sed '
					s/\r$//g;
				'
			)"
			;;

		('whitespace')
			output="$(
				printf '%s' "${output}" \
				| sed '
					s/^[[:space:]]*//g;
					s/[[:space:]]*$//g;
				'
			)"
			;;

	esac
done
OUTPUT="${output}"

printf '%s\n' "${OUTPUT}"
