#!/bin/sh

# Copyright (c) 2018-2019 Andrew Steel <copyright@andrewsteel.net>
#
# SPDX-License-Identifier: GPL-3.0-only
#
# The GNU General Public License Version 3 only:
#
# This is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License Version 3
# as published by the Free Software Foundation.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# For the full license, see <https://www.gnu.org/licenses/>.

# xrandr-profile:
# Sets the XRandR scaling factor based on monitor profiles.

IFS="$(printf ' \t\n!')"; IFS="${IFS%!}"
export LC_ALL='C'

STATE_DIR="/tmp/xrandr-profile-state"
TMP_DIR="/tmp/xrandr-profile-$(date +%Y%m%d%H%M%S)"

RESSCALE_DEFINITIONS="$(
	printf '%s,%s:' \
		'3840x2160' '2' \
		'2560x1440' '1' \
		'1920x1080' '1' \
		'1366x768' '1' \
		'1280x720' '1' \
		'1024x768' '1' \
		'800x600' '1' \
		'640x480' '1' \
)"

get_primary_display_id_dev() {(
	IFS="$(printf '\n!')"; IFS="${IFS%!}"

	printf '%s\n' "$(
		for DIR in $(
			find '/sys/devices' -type d \
			| sort
		); do
			if \
				test -f "${DIR}/edid" \
				&& test "$(cat "${DIR}/enabled")" = 'enabled'
			then
				basename "$(printf '%s\n' "${DIR}")"
			fi
		done
	)" \
	| head -n 1
)}

get_primary_display_id_xrandr() {(
	xrandr -q \
	| sed -n '
		s/^\([^[:space:]]\{1,\}\)[[:space:]]\{1,\}connected[[:space:]]\{1,\}primary[[:space:]]\{1,\}.*/\1/p;
	' \
	| sort \
	| head -n 1
)}

get_display_manufacturer_model() {(
	DISPLAY_ID_DEV="${1:?}"
	< "$(
		find '/sys/devices' -type d \
		| grep "${DISPLAY_ID_DEV}\$" \
		| sort \
		| head -n 1
	)/edid" \
	edid-decode \
	| grep '^Manufacturer:' \
	| cut -d ':' -f 2- \
	| sed 's/\(.*\)Serial Number.*/\1/' \
	| sed '
		s/^[[:space:]]*//;
		s/[[:space:]]$//;
	'
)}

get_display_name() {(
	DISPLAY_ID_DEV="${1:?}"
	< "$(
		find '/sys/devices' -type d \
		| grep "${DISPLAY_ID_DEV}\$" \
		| sort \
		| head -n 1
	)/edid" \
	edid-decode \
	| grep '^Monitor name:' \
	| cut -d ':' -f 2- \
	| sed '
		s/^[[:space:]]*//;
		s/[[:space:]]$//;
	'
)}

scale_ui() {(
	SCALE="${1}"
	gsettings set \
		org.gnome.settings-daemon.plugins.xsettings overrides \
		"[{'Gdk/WindowScalingFactor', <${SCALE}>}]"
)}

unset -v \
	ACTION \
	RESOLUTION \
	SCALE
unset -v \
	gui_picker \
	reset_all \
	reset_resolution \
	reset_scale \
	resolution \
	scale \
	toggle_dpi \
	toggle_scale
while test "${#}" -gt 0; do
	case "${1}" in
		( '-g' \
		| '--g' \
		| '--gu' \
		| '--gui' \
		| '--gui-' \
		| '--gui-p' \
		| '--gui-pi' \
		| '--gui-pic' \
		| '--gui-pick' \
		| '--gui-picke' \
		| '--gui-picker' )
			gui_picker='TRUE'
			;;
		( '-r' \
		| '--r' \
		| '--re' \
		| '--res' )
			printf '%s: %s: %s\n' \
				'xrandr-profile' \
				"option '${1}' is ambiguous; possibilities" \
				"'--reset-all' '--reset-scale' '--reset-resolution' '--resolution'" \
				>&2
			exit 1
			;;
		( '--rese' \
		| '--reset' \
		| '--reset-' )
			printf '%s: %s: %s\n' \
				'xrandr-profile' \
				"option '${1}' is ambiguous; possibilities" \
				"'--reset-all' '--reset-scale' '--reset-resolution'" \
				>&2
			exit 1
			;;
		( '--reset-a' \
		| '--reset-al' \
		| '--reset-all' )
			reset_all='TRUE'
			;;
		( '--reset-r' \
		| '--reset-re' \
		| '--reset-res' \
		| '--reset-reso' \
		| '--reset-resol' \
		| '--reset-resolu' \
		| '--reset-resolut' \
		| '--reset-resoluti' \
		| '--reset-resolutio' \
		| '--reset-resolution' )
			reset_resolution='TRUE'
			;;
		( '--reset-s' \
		| '--reset-sc' \
		| '--reset-sca' \
		| '--reset-scal' \
		| '--reset-scale' )
			reset_scale='TRUE'
			;;
		( '--reso' \
		| '--resol' \
		| '--resolu' \
		| '--resolut' \
		| '--resoluti' \
		| '--resolutio' \
		| '--resolution' )
			resolution="${2}"
			shift
			;;
		( '-s' \
		| '--s' \
		| '--sc' \
		| '--sca' \
		| '--scal' \
		| '--scale' )
			scale="${2}"
			shift
			;;
		( '-t' \
		| '--t' \
		| '--to' \
		| '--tog' \
		| '--togg' \
		| '--toggl' \
		| '--toggle' \
		| '--toggle-' )
			printf '%s: %s: %s\n' \
				'xrandr-profile' \
				"option '${1}' is ambiguous; possibilities" \
				"'--toggle-dpi' '--toggle-scale'" \
				>&2
			exit 1
			;;
		( '--toggle-d' \
		| '--toggle-dp' \
		| '--toggle-dpi' )
			toggle_dpi='TRUE'
			;;
		( '--toggle-s' \
		| '--toggle-sc' \
		| '--toggle-sca' \
		| '--toggle-scal' \
		| '--toggle-scale' )
			toggle_scale='TRUE'
			;;
	esac
	shift
done
if test "${gui_picker}"; then
	ACTION='gui-picker'
elif test "${reset_all}"; then
	ACTION='reset-all'
elif test "${reset_resolution}"; then
	ACTION='reset-resolution'
elif test "${reset_scale}"; then
	ACTION='reset-scale'
elif test "${resolution}"; then
	if test "${scale}"; then
		ACTION='resolution-scale'
		RESOLUTION="${resolution}"
		SCALE="${scale}"
	else
		ACTION='resolution'
		RESOLUTION="${resolution}"
	fi
elif test "${scale}"; then
	ACTION='scale'
	SCALE="${SCALE}"
elif test "${toggle_dpi}"; then
	ACTION='toggle-dpi'
elif test "${toggle_scale}"; then
	ACTION='toggle-scale'
fi

mkdir -p "${STATE_DIR}"
mkdir -p "${TMP_DIR}"
if test "${XDG_SESSION_TYPE}" = 'x11'; then

	DISPLAY_ID="$(get_primary_display_id_xrandr)"
	DISPLAY_NAME="$(get_display_name "$(get_primary_display_id_dev)")"
	if ! test "${DISPLAY_NAME}"; then
		DISPLAY_NAME="$(get_display_manufacturer_model "$(get_primary_display_id_dev)")"
	fi

	if test "${ACTION}" = 'toggle-dpi'; then
		if \
			test -f "${STATE_DIR}/state" \
			&& test "$(cat "${STATE_DIR}/state")" != 'reset-all'
		then
			ACTION='reset-all'
		else
			ACTION='dpi-96'
		fi
	fi

	if test "${ACTION}" = 'toggle-scale'; then
		if \
			test -f "${STATE_DIR}/state" \
			&& test "$(cat "${STATE_DIR}/state")" != 'reset-scale'
		then
			ACTION='reset-scale'
		else
			ACTION='scale'
			SCALE='1x1'
		fi
	fi

	DISPLAY_NAME_FRIENDLY="$(case "${DISPLAY_NAME}" in
		('LTM Model 3937') echo 'GPD Win 2' ;;
		('LGD Model 588') echo 'HP Spectre x360 13-ae003na' ;;
		('LG Ultra HD' | 'GSM Model 5b09') echo 'LG 27UD68P 4K Monitor' ;;
	esac)"
	DISPLAY_RATIO="$(case "${DISPLAY_NAME_FRIENDLY}" in
		('GPD Win 2') echo '16x9' ;;
		('HP Spectre x360 13-ae003na') echo '16x9' ;;
		('LG 27UD68P 4K Monitor') echo '16x9' ;;
	esac)"
	DISPLAY_RESOLUTION="$(case "${DISPLAY_NAME_FRIENDLY}" in
		('GPD Win 2') echo '1280x720' ;;
		('HP Spectre x360 13-ae003na') echo '3840x2160' ;;
		('LG 27UD68P 4K Monitor') echo '3840x2160' ;;
	esac)"
	DISPLAY_SCALE="$(case "${DISPLAY_NAME_FRIENDLY}" in
		('GPD Win 2') echo '1' ;;
		('HP Spectre x360 13-ae003na') echo '2' ;;
		('LG 27UD68P 4K Monitor') echo '1.5' ;;
	esac)"
	DISPLAY_SIZE="$(case "${DISPLAY_NAME_FRIENDLY}" in
		('GPD Win 2') echo '6' ;;
		('HP Spectre x360 13-ae003na') echo '13.3' ;;
		('LG 27UD68P 4K Monitor') echo '27' ;;
	esac)"

	case "${ACTION}" in

		('dpi-96')
			scale_ui 1
			case "${DISPLAY_NAME_FRIENDLY}" in
				('GPD Win 2')
					xrandr --output "${DISPLAY_ID}" \
						--mode 1280x720 \
						--scale 1x1
					test "${?}" == '0' \
					&& echo 'dpi-96' > "${STATE_DIR}/state"
					;;
				('HP Spectre x360 13-ae003na')
					xrandr --output "${DISPLAY_ID}" \
						--mode 1920x1080 \
						--scale 1x1
					test "${?}" == '0' \
					&& echo 'dpi-96' > "${STATE_DIR}/state"
					;;
				('LG 27UD68P 4K Monitor')
					xrandr --output "${DISPLAY_ID}" \
						--mode 2560x1440 \
						--scale 1x1
					test "${?}" == '0' \
					&& echo 'dpi-96' > "${STATE_DIR}/state"
					;;
			esac
			;;

		('gui-picker')
			if ! test "$(command -v zenity)"; then
				printf '%s: %s\n' \
					'xrandr-profile' \
					'`zenity` not in PATH' \
					>&2
				exit 1
			fi
			GUI_LIST_IFS='|'
			GUI_LIST_IFS_INTERNAL=','
			MODE="$(
				LIST="$(
					IFS=':'
					for RESSCALE in ${RESSCALE_DEFINITIONS}; do
						IFS=','
						RESOLUTION="$(printf %s "${RESSCALE}" | cut -d ',' -f 1)"
						SCALE="$(printf %s "${RESSCALE}" | cut -d ',' -f 2)"
						printf "%s${GUI_LIST_IFS}" \
							"${RESOLUTION}${GUI_LIST_IFS_INTERNAL}${SCALE}" \
							"${RESOLUTION}:${SCALE}"
					done
				)"
				IFS="${GUI_LIST_IFS}"
				zenity --list \
					--width=0 \
					--height=240 \
					--title='Resolution:Scale' \
					--text='Default: Native' \
					--hide-header \
					--hide-column=1 \
					--column='code' \
					--column='display' \
					'' 'Native' \
					${LIST}
			)"
			if test "${?}" == '0'; then
				if test "${MODE}"; then
					RESOLUTION="$(
						printf %s "${MODE}" \
						| cut -d "${GUI_LIST_IFS_INTERNAL}" -f 1
					)"
					SCALE="$(
						printf %s "${MODE}" \
						| cut -d "${GUI_LIST_IFS_INTERNAL}" -f 2
					)"
				else
					RESOLUTION="${DISPLAY_RESOLUTION}"
					SCALE="${DISPLAY_SCALE}"
				fi
				OUTPUT="$(
					"${0}" \
						--resolution "${RESOLUTION}" \
						--scale "${SCALE}" \
						2>&1
				)"
				if test "${?}" == '0'; then
					exit 0
				else
					zenity --error \
						--text="${OUTPUT}"
					exit 1
				fi
			fi
			;;

		('reset-all')
			case "${DISPLAY_NAME_FRIENDLY}" in
				('GPD Win 2')
					xrandr --orientation right
					;;
			esac
			"${0}" \
				--resolution "${DISPLAY_RESOLUTION}" \
				--scale "${DISPLAY_SCALE}"
			if test "${?}" == '0'; then
				echo 'reset-all' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

		('reset-resolution')
			xrandr --output "${DISPLAY_ID}" \
				--mode "${DISPLAY_RESOLUTION}"
			if test "${?}" == '0'; then
				echo 'reset-resolution' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

		('reset-scale')
			if test "$(echo "${DISPLAY_SCALE} > 1" | bc)" == '1'; then
				scale_ui 2
			else
				scale_ui 1
			fi
			if test "${DISPLAY_SCALE%.*}" != "${DISPLAY_SCALE}"; then
				xrandr --output "${DISPLAY_ID}" \
					--scale "${DISPLAY_SCALE}x${DISPLAY_SCALE}"
			else
				xrandr --output "${DISPLAY_ID}" \
					--scale 1x1
			fi
			if test "${?}" == '0'; then
				echo 'reset-scale' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

		('resolution')
			xrandr --output "${DISPLAY_ID}" \
				--mode "${RESOLUTION}"
			if test "${?}" == '0'; then
				echo 'resolution' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

		('resolution-scale')
			if test "${SCALE#*.}" != "${SCALE}"; then
				INTEGER="${SCALE%.*}"
				FRACTION="${SCALE#*.}"
				scale_ui "$((INTEGER+1))"
				SCALE_FRACTION="$(echo "(1-0.${FRACTION})+1" | bc)"
				SCALE_PARAM="${SCALE_FRACTION}x${SCALE_FRACTION}"
			else
				scale_ui "${SCALE}"
				SCALE_PARAM='1x1'
			fi
			xrandr --output "${DISPLAY_ID}" \
				--mode "${RESOLUTION}" \
				--scale "${SCALE_PARAM}"
			if test "${?}" == '0'; then
				echo 'resolution-scale' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

		('scale')
			if test "${SCALE#*.}" != "${SCALE}"; then
				INTEGER="${SCALE%.*}"
				FRACTION="${SCALE#*.}"
				scale_ui "$((INTEGER+1))"
				SCALE_FRACTION="$(echo "(1-0.${FRACTION})+1" | bc)"
				SCALE_PARAM="${SCALE_FRACTION}x${SCALE_FRACTION}"
			else
				scale_ui "${SCALE}"
				SCALE_PARAM='1x1'
			fi
			xrandr --output "${DISPLAY_ID}" \
				--scale "${SCALE_PARAM}"
			if test "${?}" == '0'; then
				echo 'scale' > "${STATE_DIR}/state"
			else
				exit 1
			fi
			;;

	esac

fi
rmdir "${TMP_DIR}" 2> /dev/null
